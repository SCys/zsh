#!/bin/zsh

# execute system profile.d
[[ -f /etc/profile ]] && . /etc/profile

# add more completion
fpath=(~/.zsh/completions $fpath)

. ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
. ~/.zsh/etc/completion
. ~/.zsh/etc/history
. ~/.zsh/etc/bindkey
. ~/.zsh/etc/alias

#. ~/.zsh/libs/git-prompt.zsh/git-prompt.zsh
# . ~/.zsh/libs/git-prompt.zsh/examples/rprompt.zsh
#. ~/.zsh/libs/git-prompt.zsh/examples/default.zsh

# 颜色
autoload colors
[[ "${terminfo[colors]}" -ge 8 ]] && colors

# zplug(disabled, startup too slow)
# export ZPLUG_HOME=$HOME/.zsh/libs/zplug
# if [ -f $ZPLUG_HOME/init.zsh ]; then
# 	. $ZPLUG_HOME/init.zsh

# 	if ! zplug check; then
# 		zplug install
# 	fi

# 	zplug load

# 	if zplug check b4b4r07/enhancd; then
# 		export ENHANCD_FILTER=fzf-tmux
# 	fi

#     zplug "woefe/wbase.zsh"
#     zplug "woefe/git-prompt.zsh", use:"{git-prompt.zsh,examples/wprompt.zsh}"
#     zplug "junegunn/fzf", use:"shell/*.zsh"
#     zplug "junegunn/fzf-bin", from:gh-r, as:command, rename-to:fzf, use:"*linux*amd64*"
#     zplug "sharkdp/fd", from:gh-r, as:command, rename-to:fd, use:"*x86_64-unknown-linux-gnu.tar.gz"
#     zplug "zsh-users/zsh-completions"
#     zplug "zsh-users/zsh-autosuggestions"
#     zplug "zsh-users/zsh-syntax-highlighting", defer:2
#     zplug "zsh-users/zsh-history-substring-search", defer:3
#     zplug load
# fi

# zplugin
if [ -f $HOME/.zsh/libs/zplugin/zplugin.zsh ]; then
    source $HOME/.zsh/libs/zplugin/zplugin.zsh
    autoload -Uz _zplugin
    (( ${+_comps} )) && _comps[zplugin]=_zplugin

    # Two regular plugins loaded without tracking.
    zplugin light zsh-users/zsh-autosuggestions
    zplugin light zdharma/fast-syntax-highlighting

    # Plugin history-search-multi-word loaded with tracking.
    zplugin load zdharma/history-search-multi-word

    # Load the pure theme, with zsh-async library that's bundled with it.
    zplugin ice pick"async.zsh" src"pure.zsh"
    zplugin light sindresorhus/pure

    # Binary release in archive, from GitHub-releases page.
    # After automatic unpacking it provides program "fzf".
    zplugin ice from"gh-r" as"program"
    zplugin load junegunn/fzf-bin

    # One other binary release, it needs renaming from `docker-compose-Linux-x86_64`.
    # This is done by ice-mod `mv'{from} -> {to}'. There are multiple packages per
    # single version, for OS X, Linux and Windows – so ice-mod `bpick' is used to
    # select Linux package – in this case this is actually not needed, Zplugin will
    # grep operating system name and architecture automatically when there's no `bpick'.
    zplugin ice from"gh-r" as"program" mv"docker* -> docker-compose" bpick"*linux*"
    zplugin load docker/compose

    # Vim repository on GitHub – a typical source code that needs compilation – Zplugin
    # can manage it for you if you like, run `./configure` and other `make`, etc. stuff.
    # Ice-mod `pick` selects a binary program to add to $PATH. You could also install the
    # package under the path $ZPFX, see: http://zdharma.org/zplugin/wiki/Compiling-programs
    zplugin ice as"program" atclone"rm -f src/auto/config.cache; ./configure" \
        atpull"%atclone" make pick"src/vim"
    zplugin light vim/vim

    # Scripts that are built at install (there's single default make target, "install",
    # and it constructs scripts by `cat'ing a few files). The make'' ice could also be:
    # `make"install PREFIX=$ZPFX"`, if "install" wouldn't be the only, default target.
    zplugin ice as"program" pick"$ZPFX/bin/git-*" make"PREFIX=$ZPFX"
    zplugin light tj/git-extras

    # Handle completions without loading any plugin, see "clist" command.
    # This one is to be ran just once, in interactive session.
    # zplugin creinstall %HOME/my_completions
fi
